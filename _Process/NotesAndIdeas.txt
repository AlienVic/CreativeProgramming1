
NOTES && IDEAS:

week 00: intro and syllabus
- hello, why drawn to writing code?
- programming a person to sit in a chair
- homework: install p5

week 01: drawing
- creating a sketch, setup(), saving, running
- println() to display "hello world"
- size() and coordinate system
- semicolons and errors
- rgb color, background()
- fill() and stroke()
- rect() and ellipse()
- strokeWeight(), noFill(), and noStroke()
- width/height variables and types, using math to draw
- line(), tri(), and beginShape() -> vertex() -> endShape()
- rgb + alpha
- save() image files
- getting help
	- Processing forum
	- StackOverflow
	- Github issues
	- being a good member of the community
- homework: drawing pictures of robots
	- write a sketch to draw a robot
	- should include image of run sketch
	- zip everything and upload to Canvas
	- stretch goals: fully resizable, shading, perspective

week 02: iteration
- for loops
	- drawing vertical lines, then horizontal
- nested for loops
	- same code as above but nested
	- dots in grid
- using loop to drive other things
	- color changes across screen
	- in-class sketches exploring what else you can drive with loop/loops
- pushMatrix() and popMatrix() to draw locally
- creating functions
	- drawing shapes with no args
	- passing color() args
- homework: algorithmic quilts
	- write a sketch that generates an algorithmic quilt
	- historical research first, drawing on graph paper
	- sketch should generate quilt image
	- can include non-loop elements, but mostly should be repetition
	- export to image file
	- zip and upload to Canvas
	- stretch goals: stitching too

week 03: recursion
- vertical lines as for loop
	- then recursive version with function
- global and local variables
- tree
- 
- if time: pixel[] and mandelbrot set
- homework: fractal exploration

week 04: time
- draw() function
- if/else if/else
- strings (word clock, etc)
- fonts and text
- saving sequential files
	- saving to folder
	- nf() for padding
- MovieMaker tool, ffmpeg
- homework: three clocks, open source readings
	- create at least three clock sketches
	- output to .mov files
	- read selections about open source
		- computer lib
		- https://www.debian.org/devel/constitution
		- cc lic
		- coding freedom
		- brief hist of linux

week 05: interaction 1
⊨ open source
	- discuss readings
	- contributing to open source projects
- mouseX and mouseY
- mousePressed(), mouseDragged(), mouseReleased()
- background with alpha
- homework: drawing app

week 06: randomness
- random()
- map() and constrain()
- arrays (to pick random items from)
- writing to PDF
- using plotter
- homework: exploration of randomness, supplies for phys mem
	- draw using plotter

⊨ week 07: physical memory
- 
- homework: physical memory prototype, make sure python is installed
	- also: test python install in terminal by typing 'python' (exit() to quit)

week 08: language
- basics of a python script
	- script vs sketch vs program vs application
- printing 'hello world', running in Terminal
- basic structures: for, if/elif/else
- lists of words
	- manual and loading from file
	- escaping characters, newline
	- cleaning up text input (strip(), etc)
	- regex?
- picking random elements
- templating a string
- case changes
- saving output to text file
	- write vs append
- homework: bot
	- create a text-based bot that automatically posts text
	- finish writing bot code, use for loop to write 100 bot outputs to file, manually cull to 30 favs
	- print bot output
	- also: sign up for twitter account (can be set to private)
		- if already have one, create new gmail account and separate twitter for your bot

week 09: language 2 ⊨ machine learning
- installing modules
	- install twitter lib
- creating app for bot on twitter
- saving oauth settings and loading into sketch
- posting to twitter
- demo my RPi bot server, SSH and FTP, cron
- super basic machine learning intro
	- char-rnn
- homework: get bot on twitter, train rnn
	- finish getting bot posting to twitter, screenshot some tweets
	- train char-rnn on a source text(s), generate new output

⊨ week 10: critical code
- reading code as text
- homework: 2-page analysis of a piece of code

week 11: images
- loading and displaying images
- pixel[] and extracting rgb
- manipulating images algorithmically
	- darkening image
	- binary and colored binary
	- random mutation of color
	- kernel filter
- homework: final project proposal

week 12: interaction 2
- discuss final project ideas in small groups
- creating classes
	- adding methods
- ArrayLists
	- create and destroy
	- looping through
- particle systems
- in class: digital fireworks prototyping
- homeowork: rough final project prototype

week 13: interaction 3
- quick demos: final projects
- gravity and physics
- in class: finish digital fireworks
- homework: finish digital fireworks if necessary, final project

week 14: final project
- homework: finish final project

exam period: final critique

- - -

"A computer is like a violin. You can imagine a novice trying first a phonograph and then a violin. The latter, he says, sounds terrible. That is the argument we have heard from our humanists and most of our computer scientists. Computer programs are good, they say, for particular purposes, but they aren't flexible. Neither is a violin, or a typewriter, until you learn how to use it." – Marvin Minsky in "Why Programming is a Good Medium for Expressing Poorly-Understood and Sloppily-FOrmulated Ideas", quoted in "Structure and Interpretation of Computer Programs"

Phys memory project in middle of class
- show old stuff

Randomness
- this vid: https://www.youtube.com/watch?v=q15yNrJHOak&list=WL&index=49
	- watch last 1/2 in class to show use of RNG
- house of dust
- A Michael Noll at BL: "Patterns by 7090" (referring to IBM 7090 computer used to make them)
- frieder nake (esp "fields of Rectangular Cross Hatchings")
- draw with cricut plotter instead of just printing? (nice conn to historical works)
- manfred mohr
- charles csuri "Random War" (1967)
- perlin noise

"The computer is a unique device for the arts since it can function soley as an obedient tool with vast capabilities for controlling complicated and involved processes, but then again, full exploitation of its unique talents for controlled randomness and detailed algorithms could result in an entirely new machine – a creative artistic medium." – A. Michael Noll (1970)

"The limits of my language mean the limits of my world." – Ludwig Wittgenstein

“The process of preparing programs for a digital computer is especially attractive, not only because it can be economically and scientifically rewarding, but also because it can be an aesthetic experience much like composing poetry or music.” – Donald Knuth (quoted from Computational Beauty of Nature, a favorite book of mine)

"It can be a relief to know that, even though code is just a complex set of step-by-step instructions, it is still in some way fallible. It cannot yet fully approximate human technique and appearance."
- Brian Feldman, NY Magazine
http://nymag.com/selectall/2016/03/snapchats-face-swaps-expose-tech-fears.html


READINGS:
https://medium.com/backchannel/inside-deep-dreams-how-google-made-its-computers-go-crazy-83b9d24e66df#.ad4eukafr
